{"version":3,"sources":["utils/erc20.ts","hooks/useTokenBalance.ts","hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/Home.tsx"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","account","a","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","balance","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","cakeContract","cakeABI","getCakeAddress","supply","BigNumber","fetchTotalSupply","useBurnedBalance","setBalance","web3","useWeb3","currentProvider","res","fetchBalance","useTokenBalance","useWallet","ethereum","fastRefresh","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","fetchBalances","useAllEarnings","balances","fetchAllBalances","CardValue","value","decimals","fontSize","lineHeight","prefix","bold","color","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","style","CardBusdValue","props","Block","styled","div","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","pow","toNumber","earningsBusd","multipliedBy","usePriceCakeBusd","CakeWalletBalance","cakeBalance","priceData","useGetPriceData","cakePriceUsd","Number","prices","TOAST","busdBalance","getBalanceNumber","StyledFarmStakingCard","Card","Label","img","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","dark","id","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","burnedBalance","cakeSupply","data","useGetStats","total_value_locked_all","toLocaleString","maximumFractionDigits","Cards","mediaQueries","lg","BaseLayout","sm","Home","Page","FarmStakingCard","as","className","alt","src"],"mappings":"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","file":"static/js/13.867bb206.chunk.js","sourcesContent":["import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(\n        web3.currentProvider,\n        tokenAddress,\n        '0x000000000000000000000000000000000000dEaD',\n      )\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from 'toastswapuikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color=\"#ccc\">\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardBusdValue\n","import React from 'react'\nimport { Text } from 'toastswapuikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n}\n`\n\nconst CakeHarvestBalance = () => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(usePriceCakeBusd()).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      <CardBusdValue value={earningsBusd} />\n    </Block>\n  )\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from 'toastswapuikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { useGetPriceData } from 'hooks/api'\nimport { BigNumber } from 'bignumber.js'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\n\nconst CakeWalletBalance = () => {\n  const TranslateString = useI18n()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const priceData = useGetPriceData()\n  const cakePriceUsd = priceData ? Number(priceData.prices.TOAST) : undefined\n \n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceUsd).toNumber()\n  const { account } = useWallet()\n  \n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <>\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\n      <CardBusdValue value={busdBalance} />\n    </>\n  )\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button, dark } from 'toastswapuikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\" theme={dark}>\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <Block>\n          <Label>{TranslateString(544, 'TOAST to Harvest')}:</Label>\n          <CakeHarvestBalance />\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'TOAST in Wallet')}:</Label>\n          <CakeWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting CAKE')\n                : TranslateString(532, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Skeleton, Text, dark } from 'toastswapuikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { useGetStats, useGetPriceData } from 'hooks/api'\nimport CardValue from './CardValue'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - getBalanceNumber(burnedBalance) : 0\n  const data = useGetStats()\n  const priceData = useGetPriceData()\n  const toastPriceUsd = priceData ? Number(priceData.prices.TOAST) : undefined\n\n  const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\" theme={dark}>\n          {TranslateString(534, 'Toast Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\" theme={dark}>\n            {TranslateString(536, 'Total TOAST Supply')}\n          </Text>\n          {cakeSupply && <CardValue color=\"#fff\" fontSize=\"14px\" value={cakeSupply} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\" theme={dark}>\n            {TranslateString(538, 'Total TOAST Burned')}\n          </Text>\n          <CardValue fontSize=\"14px\" color=\"#fff\" value={getBalanceNumber(burnedBalance)} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\" theme={dark}>\n            {TranslateString(540, 'New TOAST/block')}\n          </Text>\n          <CardValue fontSize=\"14px\" color=\"#fff\" decimals={0} value={1} />\n        </Row>\n\n       \n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from 'toastswapuikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\nimport LotteryCard from 'views/Home/components/LotteryCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPYCard from 'views/Home/components/EarnAPYCard'\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\nimport WinCard from 'views/Home/components/WinCard'\n\nconst Hero = styled.div`\n  align-items: left;\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: left;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: left;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <CakeStats />\n        </Cards>\n      </div>\n\n      <Heading as=\"h1\" size=\"lg\" mb=\"24px\" color=\"white\">\n        {TranslateString(576, 'Announcements')}\n      </Heading>\n\n      <div className=\"newsitem\">\n        <div className=\"pt-6 flex mx-4\">\n          <div className=\"pr-4\">\n            <h4 className=\"text-sm font-semibold\">UPCOMING: LOAFS</h4>\n          </div>\n        </div>\n        <div className=\"pt-2 pb-6 flex mx-4 border-b border-gray-100\">\n          <div className=\"pr-4 2xl:w-full\">\n            <div className=\"mt-1\">\n              <p>\n                We are cooking up a new way to hold an index of tokens. Create portfolios of tokens that are tradeable\n                on exchanges using a LoafSet. A Loaf is a token that represents a fully collateralized portfolio of\n                other assets including Bitcoin (WBTC), Ethereum (WETH), and dollar-pegged coins (DAI). Loafs\n                automatically rebalance to make executing any portfolio strategy simple.\n              </p>\n            </div>\n          </div>\n          <div className=\"ml-4 flex items-start\">\n            <div className=\"rounded bg-gray-300 mt-2 sm:mt-0 w-20 sm:w-32 h-20\">\n              <img alt=\"basicimg\" src=\"../images/kitchen.jpg\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}